{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Sensor Suite","text":"","tags":["tag1","tag2"]},{"location":"#sensor-subsystem","title":"Sensor Subsystem","text":"<p>The sensor suite gathers environmental data for the user and positional data to align the device's solar panel. This data is transmitted over the UART daisy chain to the other subsystems.</p> <p>Block Diagram Component Selection Schematic Bill of Materials API Appendix</p>","tags":["tag1","tag2"]},{"location":"#ian-anderson","title":"Ian Anderson","text":"","tags":["tag1","tag2"]},{"location":"#egr-314-team-306","title":"EGR 314 - Team 306","text":"","tags":["tag1","tag2"]},{"location":"api/","title":"Application Programming Interface","text":""},{"location":"api/#team-member-ids","title":"Team Member IDs","text":"Name Subsystem Address Aarshon HMI <code>0x61 'a'</code> Alex Motor <code>0x63 'c'</code> Ian Sensor <code>0x69 'i'</code> KD Websocket <code>0x6B 'k'</code> Broadcast <code>0x58 'X'</code>"},{"location":"api/#outgoing-messages","title":"Outgoing Messages","text":"<p>Broadcast sensor data This message type broadcasts all sensor data. uint16_t is in big endian form</p> . byte 1 byte 2 byte 3-4 Variable Name msg_type sensor_num sensor_val Variable Type <code>uint8_t</code> <code>uint8_t</code> <code>uint16_t</code> Min Value 1 <code>0x31</code> 1 <code>0x31</code> -40 Max Value 1 <code>0x31</code> 4 <code>0x34</code> 1300 Example 1 <code>0x31</code> 3 <code>0x33</code> 37 Sensors Number Data Min Data Max wind speed 1 <code>0x31</code> 0 100 temperature 2 <code>0x32</code> -40 85 humidity 3 <code>0x33</code> 20 80 air pressure 4 <code>0x34</code> 10 1300 Sender Destination Ian <code>'i'</code> Broadcast <code>'X'</code> <p>Subsystem Error Code This message type sends an error code corresponding to the amount of current functionality.</p> . byte 1 byte 2 Variable Name msg_type err_code Variable Type <code>char</code> <code>uint8_t</code> Min Value 4 <code>0x34</code> 0 <code>0x30</code> Max Value 4 <code>0x34</code> 2 <code>0x32</code> Example 4 <code>0x34</code> 1 <code>0x31</code> Senders Destination Alex <code>'c'</code>Ian <code>'i'</code>Kushagra <code>'k'</code> Aarshon <code>'a'</code> <p>Subsystem Error Message This message type sends a description about specific system errors</p> . byte 1 byte 2-58 Variable Name msg_type err_msg Variable Type <code>char</code> char array (<code>uint8_t</code>) Min Value 5 <code>0x35</code> char[1] Max Value 5 <code>0x35</code> char[57] Example 5 <code>0x35</code> \"sensor 1 read error\" Senders Destination Alex <code>'c'</code>Ian <code>'i'</code>Kushagra <code>'k'</code> Aarshon <code>'a'</code>"},{"location":"api/#received-messages","title":"Received Messages","text":"<p>There are no message types that concern this subsystem as a recipient.</p>"},{"location":"api/#mplabx-code","title":"MPLabX Code","text":"<p>Software</p>"},{"location":"appendix/","title":"Appendix","text":""},{"location":"appendix/#charts","title":"Charts","text":""},{"location":"block/","title":"Block Diagram","text":""},{"location":"block/#sensor-suite-subsystem","title":"Sensor Suite Subsystem","text":""},{"location":"bom/","title":"Bill of Materials","text":""},{"location":"bom/#bill-of-materials","title":"Bill of Materials","text":"<p>Bill of Materials Excel Sheet</p>"},{"location":"charts/","title":"Charts","text":"<pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre> <pre><code>sequenceDiagram\n  autonumber\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!</code></pre> <pre><code>stateDiagram-v2\n  state fork_state &lt;&lt;fork&gt;&gt;\n    [*] --&gt; fork_state\n    fork_state --&gt; State2\n    fork_state --&gt; State3\n\n    state join_state &lt;&lt;join&gt;&gt;\n    State2 --&gt; join_state\n    State3 --&gt; join_state\n    join_state --&gt; State4\n    State4 --&gt; [*]</code></pre>"},{"location":"component/","title":"Component Selection","text":""},{"location":"component/#overview","title":"Overview","text":"<p>The sensor subsystem utilizes an 8-bit PIC18F27Q10-I/SO microcontroller to control the subsystem. I2C is used to interface with the three sensors that gather temperature, humidity level, air pressure, and wind speed. Two photoresistors are used to monitor the angle of the sun relative to the solar panel. A comparator is used to reduce the two analog signals to a digital signal that outputs the binary direction that the panel must move in.</p> <p>Wind speed is gathered through a rotary hall effect sensor. The sensor records the rpm of the anemometer which is then used to calculate the wind speed. Humidity is measured with a relative humidity sensor. A barometer is used for measuring the air pressure. Surrounding temperature is measured using the humidity sensor, but can be measured through the barometer in the event of a failure.</p>"},{"location":"component/#required-selected-components","title":"Required &amp; Selected Components","text":"Component Name Selection Microcontroller PIC18F27Q10-I/SO Volatage Regulator LMR16006YQ3DDCRQ1 Hall Effect Sensor AS5600L-ASOM SOIC LF T&amp;RDP Temperature Sensor HIH6030-021-001 Humidity Sensor HIH6030-021-001 Air Pressure Sensor MS580301BA01-00 Comparator MCP6541RT-E/OT"},{"location":"component/#microcontroller","title":"Microcontroller","text":"PIC Information Spec Model PIC18F27Q10-I/SO Price $1.45/each Links VendorDatasheet Absolute Maximum Current 250 mA Supply Voltage Range 1.8V-5.5V Maximum GPIO Current 50 mA Memory 128 kB Clock Speed 64 MHz IO Pins 25 External Interrupts Yes MPLabX Compatibility MCC Compatible Module Available Needed Associated Pins GPIO 25 6 * ADC 4 0 * DAC 1 0 RA2,RA3,RB7 UART 2 1 RB0:RB7RC0:RC7 SPI 1 0 RB0:RB7RC0:RC7 I2C 1 1 RB0:RB7RC0:RC7 PWM 2 0 RA0:RA7RC0:RC7 ICSP 1 1 RB6,RB7,RE0"},{"location":"component/#mplabx-code-configurator","title":"MPLabX Code Configurator","text":"<p>The configuration of the microcontroller is depicted below. 2 pins are used for UART communication to connected boards, and another 2 pins are used for I2C communication to the sensor peripherals. 4 GPIO pins are used for the UART RTS and CTS lines with an additional digital line sent downstream to the motor subsystem. The remaining GPIO pin is used for the comparator input. </p> <p>This microcontroller is selected primarily due to its familiarity within the class. The smaller 28-pin package, is desirable for its greater pin spacing and reduced amount of IO pins. The requirements of the microcontroller are severely reduced due to utilizing I2C communication between peripherals. Below shows a summarized comparison of all the microcontrollers considered.</p> Option Pros Cons PIC18F47Q10-I/PT  $1.65/eachdatasheet - Familiar due to use in course- 128kB Memory- 36 IO pins- 64MHz processing- Inexpensive - Low power range- Could be limiting with amount of peripherals PIC18F27Q10-I/SO$1.45/eachdatasheet - Same features as microcontroller in course- 128kB Memory- 64MHz processing- Most inexpensive option - 25 IO pins- Less IO device system capabilities PIC18F26Q43-I/SS$1.54/eachdatasheet - Far more digital IO features &amp; devices- 64kB Memory- 64MHz processing - 25 IO pins- More expensive than other options"},{"location":"component/#voltage-regulator","title":"Voltage Regulator","text":"Option Pros Cons LMR16006YQ3DDCRQ1$1.38/eachdatasheet - Large input voltage range- 2A output capacity- Simple application circuitry- Reduced electromagnetic interference - Smaller operational temperature range- Small package TPS62132RGTR$1.71/eachdatasheet - 3A output capacity- High switching speed- Lowest minimum input voltage- Provides short circuit protection - Smaller input voltage range- Impossible to solder by hand- Complicated application circuitry LM2675MX-3.3/NOPB$4.36/eachdatasheet - Large input voltage range- High maximum input voltage- Larger operational temperature range- Has variable output version - Limited 1A output capacity- Higher minimum input voltage- Lower switching frequency- Expensive LMR16006YQ3DDCRQ1$3.49/eachdatasheet - Large input voltage range- High switching speed allows for more compact application- Reasonable footprint size - Smallest supply amerage capacity- More complex application circuit- Lower efficiency <p>Selected Component: Option 4 - LMR16006YQ3DDCRQ1 Rational: This switching power supply has the desired output of 3.3 volts. While the supply capacity is the smallest, the application subsystem does not require excessive amounts of aperage and the 600mA of capacity leaves copious head room on capacity. It is also in a package that is easily soldered by hand. The required supporting circuitry is simple and will take up less space. The higher switching frequency makes it better suited to the lower input voltages.</p>"},{"location":"component/#hall-effect-sensor-wind-speed","title":"Hall Effect Sensor (Wind Speed)","text":"Option Pros Cons HAL3726DJ-A$2.70/eachdatasheet - Provides self diagnosis- Rotary hall effect sensor- Can read 2D position - Requires separate voltage regulator(doesn't operate at 3.3V)- More expensive option- No serial communication A1304ELHLX-T$0.96/eachdatasheet - Simple analog output- Inexpensive- Easy implementation - Linear hall effect sensor- No serial communication- Narrow operational voltage range- Higher current draw AS5600L-ASOM SOIC LF T&amp;RDP$4.54/eachdatasheet - I2C data communication- Rotary hall effect sensor- Operates at 3.3v - Most expensive option- Sensitive to moisture- Limited reprogramming <p>Selected Component: Option 3 - AS5600L-ASOM SOIC LF T&amp;RDP Rational: This option provides an I2C compatible rotary hall effect sensor. The rotary design allows for the easiest implementation of sensor. It is the most expensive option, but comes with the most ideal features.</p>"},{"location":"component/#temperature-sensor","title":"Temperature Sensor","text":"Option Pros Cons TC74A4-3.3VCTTR$1.15/eachdatasheet - Wide operational voltage range- I2C data interface- Returns raw temperature(doesn't require further calculations)- Multiple versions with different addresses - Lower resolution(7b)- More expensive- Negative temperatures require further calculations- Slower I2C clock limit LM75AD,118$0.66/eachdatasheet - I2C data interface- Higher resolution(11b)- Programmable limit- Inexpensive - Larger component- Unnecessary extra features- Requires further data transformation- Requires more connections TMP1075DGKR$0.47/eachdatasheet - I2C data interface- Higher resolution(12b)- Most inexpensive option -More data to be communicated- Requires further data transformation- Requires more connections <p>Selected Component: Other - HIH6030-021-001 Rational: The selected component for the humidity sensor doubles as a temperature sensor. This eliminates the need for a standalone sensor.</p>"},{"location":"component/#humidity-sensor","title":"Humidity Sensor","text":"Option Pros Cons HIH6030-021-001$2.55/eachdatasheet - I2C data interface- Has temperature output- Most inexpensive option- Highest accuracy - Impossible to solder by hand- Tiny chip size- Lacks standard mode I2C speed HIH6030-021-001$6.67/eachdatasheet - I2C data interface- Has temperature output- Affordable cost - Lowest relative humidity accuracy- Non-condensing HIH6131-000-001$18.09/eachdatasheet - SPI data interface- Has temperature output- Protected from condensation - Does not support I2C- Very expensive option <p>Selected Component: Option 2 - HIH6030-021-001 Rational: This option has the lowest accuracy; however, its larger package is easier to solder and supports I2C communication. It also doubles as a temperature sensor which offsets the increased cost.</p>"},{"location":"component/#air-pressure-sensor","title":"Air Pressure Sensor","text":"Option Pros Cons DPS368XTSA1$2.51/eachdatasheet - Supports I2C &amp; SPI communication- Simpler footprint- Measures temperature - Vented guage - Smaller pressure range- Impossible to solder by hand ENS220S-BLGT$2.70/eachdatasheet - Adequate pressure range- Supports I2C &amp; SPI communication- Absolute pressure guage- Measures temperature - Very low operational voltage range- Less suited for application- Impossible to solder by hand MS580301BA01-00$20.09/eachdatasheet - Supports I2C communication- Has an altimeter function- Functions as temperature sensor - Very expensive- Larger data transmissions- Complicated interfacing <p>Selected Component: Option 3 - MS580301BA01-00 Rational: This sensor is an absolute pressure sensor that can operate with the 3.3V utilized in the subsystem. It also uses I2C to communicate data which is the chosen method for the subsystem. This option was one of the few that could be hand soldered. This option is very expensive, but is worth the trade for the functionality it adds.</p>"},{"location":"component/#comparator","title":"Comparator","text":"Option Pros Cons LM2903DR$0.18/eachdatasheet - Power can be supplied rail-to-rail- Very inexpensive- Extremely fast operation- Large differential voltage range - Open collector design(harder to implement)- Larger package- More complex circuit &amp; connections MCP6541RT-E/OT$0.39/eachdatasheet - Power can be supplied rail-to-rail- Push-pull design- Can drive larger load - Slower operation speed- Smallest voltage supply range TLV7031QDBVRQ1$0.72/eachdatasheet - Power can be supplied rail-to-rail- Push-pull design- Decent voltage supply range - Limited differential voltage- Higher hysteresis- Limited load driving capability <p>Selected Component: Option 2 - MCP6541RT-E/OT Rational: The push-pull configuration of this option allows for a simpler application circuit. This option also has a lower hysteresis which gives a lower switching threshold for the application signals.</p>"},{"location":"pcb/","title":"PCB Design","text":""},{"location":"pcb/#top-pcb-design","title":"Top PCB Design","text":""},{"location":"pcb/#bottom-pcb-design","title":"Bottom PCB Design","text":""},{"location":"pcb/#design-rules-check","title":"Design Rules Check","text":"<p> DRC file</p>"},{"location":"pcb/#3d-pcb-model","title":"3D PCB Model","text":""},{"location":"schematic/","title":"Schematic","text":""},{"location":"schematic/#sensor-suite","title":"Sensor Suite","text":"<p>The microcontroller is shown in the center of the schematic. The voltage regulator circuit is shown in top left, with the programming header for the snap programmer to its right. Below those are the daisy chain headers and breakout headers for the remaining IO pins. The photoresistor comparator circuit is depicted in the bottom left. The three sensors are shown on the right side of the schematic and are all connected through the I2C lines to the microcontroller. The schematic lacks debugging lights as any debugging can be done through one of the 12 IO pins on the breakout headers. Download Schematic</p>"},{"location":"schematic/#power-budget","title":"Power Budget","text":"<p>The above Power Budget was used to help determine the necessary aperage capacity for the subsystem. This found that the previously selected voltage regulator, which supplied up to 2 amperes, was complete overkill for the 443 milliamperes that was required. A lower capacity voltage regulator was selected instead to reduce the overhead.</p>"},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\nloader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\nconst svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\nconsole.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"},{"location":"subfolder/","title":"This is the index to a subfolder","text":"<p>Things to discuss</p>"},{"location":"subfolder/another-subfile/","title":"This is a secondary sub page","text":"<p>Things to discuss</p>"}]}